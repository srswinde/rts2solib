#!/usr/bin/python3 -W ignore
#!/home/rts2obs/miniconda3/bin/python3 -W ignore


#from __future__ import print_function
#!/home/rts2obs/miniconda3/bin/python -W ignore

#from rts2 import scriptcomm

from rts2solib import scriptcomm, to_dataserver
from astropy.io import fits
from scottSock import scottSock
import sys
import os
import time
import subprocess, shlex



class ShiftFocus (scriptcomm.Rts2Comm):
    """Take and process focussing data."""

    def __init__( self ):
        scriptcomm.Rts2Comm.__init__( self )
        self.focuser = "F0"

    def shift_focus( self ):
        self.setValue("exposure", 1) # set exp time to 90 secs
        self.setValue("SHUTTER", 0, "C0")
        try:
            self.setValue("FOC_DEF", 2000, self.focuser)
            time.sleep(2.0)
            self.log('I', 'Taking image')
            self.log('I', '... about to take image')
            img1 = self.exposure( self.before_readout, "%b/queue/%N/%c/focus/%f" )
            self.setValue("FOC_DEF", 3000, self.focuser)
            time.sleep(4.0)
            self.log("I", "SENDING TO DATASERVER")
            to_dataserver(img1, "focus1.fits")
            img2 = self.exposure(None, "%b/queue/%N/%c/focus/%f" )
            to_dataserver(img2, "focus2.fits")
        except Exception as err:
            self.log("I", "err is {} ".format(err))

        exer = "/home/rts2obs/conda/bin/python3"
        focus_script = "/home/rts2obs/conda/te_pickering/ARTNfocus/scripts/mont4k_focus.py"
        intra = img1
        extra = img2
#        intra = "/home/rts2obs/data/foci/focus1.fits"
#        extra = "/home/rts2obs/data/foci/focus2.fits"
        outputfile = "/tmp/focus.out"

        cmd = "{} {} -i {} -e {} -f {}"
        args = shlex.split(cmd.format(exer, focus_script, intra, extra, outputfile))
        self.log("I", "Running focus analysis.")
        resp=subprocess.check_output(args).decode()
        for line in resp.split('\n'):
            self.log("I", line)

        with open(outputfile) as focusdat:
            focpos = focusdat.read()

        try:
            focpos_int = int(focpos)
            if 2100 < focpos_int < 2700:
                self.setValue("FOC_TAR", focpos_int, "F0")
                self.setValue("FOC_DEF", focpos_int, "F0")
            else:
                self.log("E", "Focus analysis gave erroneous focus position {}".format(focpos_int))

        except ValueError as err:
            self.log("E", "could not convert focus.out output to integer:{}".format(focpos))


    def before_readout(self):

        self.log( 'I', 'just Before readout' )

    def run( self ):
        self.shift_focus()

#def to_dataserver( fname, outfile='test.fits', clobber=True ):
#
#        try:
#            fitsfd = fits.open( fname )
#
#            width = 0
#            height = 0
#            i=0
#            for ext in fitsfd:
#                    if hasattr( ext, 'data' ):
#                            if ext.data is not None:
#                                try:
#                                    width+=ext.data.shape[0]
#                                    height+=ext.data.shape[1]
#                                    i+=1
#                                except Exception as err:
#                                    pass
#
#            fitsfd.close()
#            fsize = os.stat(fname).st_size
#
#            fd = open(fname, 'rb')
#
#
#            if clobber:
#                    clobber_char = '!'
#            else:
#                    clobber_char = ''
#            meta = "          {} {}{} 1 {} {} 0".format( fsize, clobber_char, '/home/rts2obs/'+outfile, width, height )
#            meta = meta + (256-len(meta))*' '
#
#            data = meta+fd.read()
#            lendata = len(data)
#            soc = scottSock( '10.30.1.1', 6543 )
#
#            counter = 0
#            socsize = 1024
#            buffsize = 0
#            while buffsize < len(data):
#                    sent = soc.send( data[buffsize:buffsize+1024] )
#                    buffsize+=sent
#
#        except Exception as err:
#            print("log I err {}".format(err))
#
f=ShiftFocus()

f.run()

